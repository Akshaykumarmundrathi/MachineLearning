# testingsnnmodel.py
import numpy as np
import pandas as pd

def load_and_preprocess_data(csv_path: str) -> pd.DataFrame:
    """Loads, cleans, and preprocesses the SP500 data."""
    df = pd.read_csv(csv_path, header=0, names=["date", "value"], parse_dates=['date'])
    df.set_index('date', inplace=True)
    df['value'] = pd.to_numeric(df['value'], errors='coerce')
    df['value'] = df['value'].interpolate()
    return df

def create_matrices(df: pd.DataFrame, segment_size: int = 5) -> list:
    """Generates binary matrices from the time series data."""
    matrices = []
    for i in range(0, len(df) - segment_size + 1, segment_size):
        segment = df['value'].iloc[i:i + segment_size].copy()
        ranks = segment.rank(method='min').astype(int) - 1
        matrix = np.zeros((segment_size, segment_size), dtype=int)
        for col_idx, rank in enumerate(ranks):
            matrix[int(rank), col_idx] = 1
        matrices.append(matrix)
    return matrices

# Define matrices at the module level
csv_path = 'SP500.csv'
df = load_and_preprocess_data(csv_path)
matrices = create_matrices(df)  # <-- This is critical for importing
print(matrices)
labels=[
0,
1,
4,
4,
2,
4,
0,
3,
4,
1,
2,
4,
2,
4,
4,
4,
2,
4,
1,
4,
2,
4,
2,
1,
4,
4,
3,
4,
1,
4,
3,
4,
4,
2,
2,
4,
4,
2,
2,
1,
4,
2,
3,
1,
2,
4,
4,
2,
3,
4,
4,
3,
1,
4,
4,
1,
0,
0,
1,
0,
4,
3,
4,
1,
2,
4,
3,
1,
4,
2,
4,
4,
3,
0,
3,
4,
2,
1,
4,
3,
3,
1,
4,
2,
3,
2,
4,
4,
2,
1,
2,
2,
0,
4,
4,
1,
3,
0,
0,
3,
3,
1,
1,
4,
1,
3,
2,
3,
2,
2,
1,
2,
4,
4,
2,
1,
4,
4,
3,
0,
3,
4,
3,
4,
2,
1,
2,
2,
3,
4,
0,
1,
4,
1,
1,
4,
4,
3,
4,
1,
1,
4,
4,
4,
4,
3,
4,
3,
4,
1,
1,
3,
4,
2,
4,
4,
3,
2,
1,
2,
2,
1,
4,
3,
4,
4,
1,
4,
3,
4,
4,
2,
2,
4,
4,
4,
2,
2,
3,
2,
0,
4,
3,
3,
1,
3,
3,
4,
1,
1,
4,
2,
1,
0,
4,
4,
3,
3,
1,
4,
3,
4,
4,
2,
1,
2,
2,
1,
4,
3,
4,
4,
3,
0,
4,
2,
3,
4,
2,
4,
3,
4,
2,
4,
4,
1,
1,
2,
4,
1,
4,
1,
0,
2,
1,
0,
4,
2,
3,
0,
4,
1,
4,
3,
0,
4,
4,
2,
2,
2,
3,
2,
4,
2,
2,
4,
4,
4,
3,
3,
3,
3,
4,
1,
0,
3,
4,
4,
0,
2,
4,
4,
3,
0,
1,
2,
2,
2,
4,
3,
3,
4,
1,
4,
0,
3,
3,
3,
3,
4,
4,
4,
4,
2,
3,
4,
1,
2,
2,
2,
1,
4,
3,
4,
3,
2,
3,
4,
1,
4,
3,
4,
4,
1,
4,
3,
4,
4,
2,
4,
4,
3,
2,
3,
4,
3,
4,
4,
4,
3,
0,
0,
3,
4,
1,
4,
1,
4,
4,
3,
1,
4,
4,
3,
2,
1,
1,
4,
4,
2,
4,
4,
3,
4,
2,
4,
4,
4,
4,
2,
1,
2,
4,
4,
2,
4,
4,
2,
3,
3,
4,
2,
4,
4,
1,
4,
4,
4,
1,
3,
4,
1,
4,
1,
4,
4,
4,
4,
2,
4,
4,
4,
1,
1,
4,
1,
0,
4,
1,
2,
2,
1,
2,
3,
4,
3,
4,
3,
2,
4,
2,
4,
4,
4,
4,
4,
4,
4,
2,
4,
3,
3,
1,
3,
4,
4,
4,
0,
1,
3,
4,
4,
2,
3,
4,
3,
3,
2,
0,
1,
0,
4,
3,
3,
4,
3,
1,
2,
2,
4,
1,
4,
2,
0,
1,
4,
4,
1,
2,
4,
4,
4,
2,
3,
4,
4,
1,
4,
3,
2,
3,
1,
0,
4,
0,
3,
4,
4,
2,
2,
3,
3,
4,
2,
2,
4,
2,
4,
2,
3,2,3,2,2,4,2,3,4,2,4,4,3,1,4,0,4,4,4,3,4,4,4,4,4,4,2,4,1,1,2,4,4]